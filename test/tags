!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
APP	Makefile	/^APP = main$/;"	m
AsParam	typedefs.h	/^struct AsParam$/;"	s
AspParam	typedefs.h	/^struct AspParam$/;"	s
BCD_EVEN	sccpdefs.h	/^enum { BCD_EVEN, BCD_ODD };$/;"	e	enum:__anon3
BCD_ODD	sccpdefs.h	/^enum { BCD_EVEN, BCD_ODD };$/;"	e	enum:__anon3
BIN	main.cpp	18;"	d	file:
ByteArray	typedefs.h	/^typedef vector<uchar> ByteArray;$/;"	t
Bytes	typedefs.h	/^typedef vector<uchar> Bytes;$/;"	t
CC	Makefile	/^CC=g++$/;"	m
COMMON_H_	common.h	2;"	d
CktRange	typedefs.h	/^struct CktRange$/;"	s
GT_NONE	sccpdefs.h	/^enum GtInd { GT_NONE, GT_T1, GT_T2, GT_T3, GT_T4 };$/;"	e	enum:GtInd
GT_T1	sccpdefs.h	/^enum GtInd { GT_NONE, GT_T1, GT_T2, GT_T3, GT_T4 };$/;"	e	enum:GtInd
GT_T2	sccpdefs.h	/^enum GtInd { GT_NONE, GT_T1, GT_T2, GT_T3, GT_T4 };$/;"	e	enum:GtInd
GT_T3	sccpdefs.h	/^enum GtInd { GT_NONE, GT_T1, GT_T2, GT_T3, GT_T4 };$/;"	e	enum:GtInd
GT_T4	sccpdefs.h	/^enum GtInd { GT_NONE, GT_T1, GT_T2, GT_T3, GT_T4 };$/;"	e	enum:GtInd
GetGtIndStr	SccpAddr.cpp	/^string SccpAddr::GetGtIndStr(uchar ind) const$/;"	f	class:SccpAddr
GetNAIStr	SccpAddr.cpp	/^string SccpAddr::GetNAIStr(uchar ind) const$/;"	f	class:SccpAddr
GetPcIndStr	SccpAddr.cpp	/^string SccpAddr::GetPcIndStr(uchar ind) const$/;"	f	class:SccpAddr
GetRouteIndStr	SccpAddr.cpp	/^string SccpAddr::GetRouteIndStr(uchar ind) const$/;"	f	class:SccpAddr
GetSsnIndStr	SccpAddr.cpp	/^string SccpAddr::GetSsnIndStr(uchar ind) const$/;"	f	class:SccpAddr
GtInd	sccpdefs.h	/^enum GtInd { GT_NONE, GT_T1, GT_T2, GT_T3, GT_T4 };$/;"	g
HEX	tcuser.h	18;"	d
INCLUDE	Makefile	/^INCLUDE = -I..\/$/;"	m
LIB	Makefile	/^LIB = -L..\/$/;"	m
LOADPATH	Makefile	/^LOADPATH=-Wl,-rpath=..\/$/;"	m
Label	sccpdefs.h	/^	Label()$/;"	f	struct:Label
Label	sccpdefs.h	/^    Label(uint32_t o, uint32_t d, uchar s)$/;"	f	struct:Label
Label	sccpdefs.h	/^struct Label$/;"	s
MSG1	main.cpp	21;"	d	file:
MSG2	main.cpp	22;"	d	file:
NAME_CLASS	tcuser.h	42;"	d
NAME_CPNT	tcuser.h	41;"	d
NAME_CTX	tcuser.h	40;"	d
NAME_DADDR	tcuser.h	37;"	d
NAME_QOS	tcuser.h	39;"	d
NAME_SADDR	tcuser.h	38;"	d
NAME_TMOUT	tcuser.h	43;"	d
NOT_USE	typedefs.h	84;"	d
NP_ISDN	sccpdefs.h	/^enum { NP_ISDN };$/;"	e	enum:__anon4
PC_INC	sccpdefs.h	/^enum PcInd { PC_NO,	PC_INC };$/;"	e	enum:PcInd
PC_NO	sccpdefs.h	/^enum PcInd { PC_NO,	PC_INC };$/;"	e	enum:PcInd
PLATFORM	Makefile	/^		PLATFORM="MacOS"$/;"	m
PLATFORM	Makefile	/^		PLATFORM="Unix-Like"$/;"	m
PLATFORM	Makefile	/^		PLATFORM="Windows"$/;"	m
PcInd	sccpdefs.h	/^enum PcInd { PC_NO,	PC_INC };$/;"	g
ROUTE_GT	sccpdefs.h	/^enum RouteInd { ROUTE_GT, ROUTE_PC };$/;"	e	enum:RouteInd
ROUTE_PC	sccpdefs.h	/^enum RouteInd { ROUTE_GT, ROUTE_PC };$/;"	e	enum:RouteInd
Ras	typedefs.h	/^struct Ras$/;"	s
RasParam	typedefs.h	/^struct RasParam$/;"	s
RouteInd	sccpdefs.h	/^enum RouteInd { ROUTE_GT, ROUTE_PC };$/;"	g
RouteKey	typedefs.h	/^struct RouteKey$/;"	s
SCCPADDR_H_	SccpAddr.h	2;"	d
SCCPDEF_H_	sccpdefs.h	2;"	d
SCCP_MSG_AK	sccpdefs.h	/^    SCCP_MSG_AK    = 0x08,  \/\/ 数据证实$/;"	e	enum:SccpMessage
SCCP_MSG_CC	sccpdefs.h	/^    SCCP_MSG_CC    = 0x02,  \/\/ 连接确认$/;"	e	enum:SccpMessage
SCCP_MSG_CR	sccpdefs.h	/^	SCCP_MSG_CR    = 0x01,  \/\/ 连接请求$/;"	e	enum:SccpMessage
SCCP_MSG_CREF	sccpdefs.h	/^    SCCP_MSG_CREF  = 0x03,  \/\/ 拒绝连接$/;"	e	enum:SccpMessage
SCCP_MSG_DT1	sccpdefs.h	/^    SCCP_MSG_DT1   = 0x06,  \/\/ 数据类型 1$/;"	e	enum:SccpMessage
SCCP_MSG_DT2	sccpdefs.h	/^    SCCP_MSG_DT2   = 0x07,  \/\/ 数据类型 2$/;"	e	enum:SccpMessage
SCCP_MSG_EA	sccpdefs.h	/^    SCCP_MSG_EA    = 0x0c,  \/\/ 加速数据证实$/;"	e	enum:SccpMessage
SCCP_MSG_ED	sccpdefs.h	/^    SCCP_MSG_ED    = 0x0b,  \/\/ 加速数据$/;"	e	enum:SccpMessage
SCCP_MSG_ERR	sccpdefs.h	/^    SCCP_MSG_ERR   = 0x0f,  \/\/ 协议数据单元出错$/;"	e	enum:SccpMessage
SCCP_MSG_IT	sccpdefs.h	/^    SCCP_MSG_IT    = 0x10,  \/\/ 不活动性测试$/;"	e	enum:SccpMessage
SCCP_MSG_NONE	sccpdefs.h	/^	SCCP_MSG_NONE  = 0x00,  \/\/ 未知消息类型$/;"	e	enum:SccpMessage
SCCP_MSG_RLC	sccpdefs.h	/^    SCCP_MSG_RLC   = 0x05,  \/\/ 释放完成$/;"	e	enum:SccpMessage
SCCP_MSG_RLSD	sccpdefs.h	/^    SCCP_MSG_RLSD  = 0x04,  \/\/ 释放连接$/;"	e	enum:SccpMessage
SCCP_MSG_RSC	sccpdefs.h	/^    SCCP_MSG_RSC   = 0x0e,  \/\/ 复原确认$/;"	e	enum:SccpMessage
SCCP_MSG_RSR	sccpdefs.h	/^    SCCP_MSG_RSR   = 0x0d,  \/\/ 复原请求$/;"	e	enum:SccpMessage
SCCP_MSG_UDT	sccpdefs.h	/^    SCCP_MSG_UDT   = 0x09,  \/\/ 单位数据$/;"	e	enum:SccpMessage
SCCP_MSG_UDTS	sccpdefs.h	/^    SCCP_MSG_UDTS  = 0x0a,  \/\/ 单位数据业务$/;"	e	enum:SccpMessage
SCCP_MSG_XUDT	sccpdefs.h	/^    SCCP_MSG_XUDT  = 0x11,  \/\/ 扩展单位数据$/;"	e	enum:SccpMessage
SCCP_MSG_XUDTS	sccpdefs.h	/^    SCCP_MSG_XUDTS = 0x12   \/\/ 扩展单位数据业务$/;"	e	enum:SccpMessage
SCCP_PARAM_CALLED_PARTY_ADDRESS	sccpdefs.h	/^    SCCP_PARAM_CALLED_PARTY_ADDRESS        = 0x03,   \/\/ 被叫地址$/;"	e	enum:SccpParamName
SCCP_PARAM_CALLING_PARTY_ADDRESS	sccpdefs.h	/^    SCCP_PARAM_CALLING_PARTY_ADDRESS       = 0x04,   \/\/ 主叫地址$/;"	e	enum:SccpParamName
SCCP_PARAM_CLASS	sccpdefs.h	/^    SCCP_PARAM_CLASS                       = 0x05,   \/\/ 协议类别$/;"	e	enum:SccpParamName
SCCP_PARAM_CREDIT	sccpdefs.h	/^    SCCP_PARAM_CREDIT                      = 0x09,   \/\/ 信用量$/;"	e	enum:SccpParamName
SCCP_PARAM_DESTINATION_LOCAL_REFERENCE	sccpdefs.h	/^    SCCP_PARAM_DESTINATION_LOCAL_REFERENCE = 0x01,   \/\/ 目的地局部引用号$/;"	e	enum:SccpParamName
SCCP_PARAM_END_OF_OPTIONAL_PARAMETERS	sccpdefs.h	/^    SCCP_PARAM_END_OF_OPTIONAL_PARAMETERS  = 0x00,   \/\/ 任选参数结束$/;"	e	enum:SccpParamName
SCCP_PARAM_ERROR_CAUSE	sccpdefs.h	/^    SCCP_PARAM_ERROR_CAUSE                 = 0x0d,   \/\/ 错误原因$/;"	e	enum:SccpParamName
SCCP_PARAM_RECEIVE_SEQUENCE_NUMBER	sccpdefs.h	/^    SCCP_PARAM_RECEIVE_SEQUENCE_NUMBER     = 0x07,   \/\/ 接收消息序号$/;"	e	enum:SccpParamName
SCCP_PARAM_REFUSAL_CAUSE	sccpdefs.h	/^    SCCP_PARAM_REFUSAL_CAUSE               = 0x0e,   \/\/ 拒绝原因$/;"	e	enum:SccpParamName
SCCP_PARAM_RELEASE_CAUSE	sccpdefs.h	/^    SCCP_PARAM_RELEASE_CAUSE               = 0x0a,   \/\/ 释放原因$/;"	e	enum:SccpParamName
SCCP_PARAM_RESET_CAUSE	sccpdefs.h	/^    SCCP_PARAM_RESET_CAUSE                 = 0x0c,   \/\/ 复位原因$/;"	e	enum:SccpParamName
SCCP_PARAM_RETURN_CAUSE	sccpdefs.h	/^    SCCP_PARAM_RETURN_CAUSE                = 0x0b,   \/\/ 诊断$/;"	e	enum:SccpParamName
SCCP_PARAM_SEGMENTING_REASSEMBLING	sccpdefs.h	/^    SCCP_PARAM_SEGMENTING_REASSEMBLING     = 0x06,   \/\/ 分段\/重装$/;"	e	enum:SccpParamName
SCCP_PARAM_SEQUENCING_SEGMENTING	sccpdefs.h	/^    SCCP_PARAM_SEQUENCING_SEGMENTING       = 0x08,   \/\/ 顺序\/分段$/;"	e	enum:SccpParamName
SCCP_PARAM_SOURCE_LOCAL_REFERENCE	sccpdefs.h	/^    SCCP_PARAM_SOURCE_LOCAL_REFERENCE      = 0x02,   \/\/ 源端局部引用号$/;"	e	enum:SccpParamName
SCCP_PARAM_USER_DATA	sccpdefs.h	/^    SCCP_PARAM_USER_DATA                   = 0x0f,   \/\/ 用户数据$/;"	e	enum:SccpParamName
SHELL	Makefile	/^		SHELL=powershell.exe$/;"	m
SHELL	Makefile	/^SHELL=powershell.exe$/;"	m
SRCS-y	Makefile	/^SRCS-y := main.cpp tcuser.cpp SccpAddr.cpp common.cpp$/;"	m
SSN_CAP	sccpdefs.h	/^const uchar SSN_CAP     = 0x92;  \/\/ 146$/;"	v
SSN_HLR	sccpdefs.h	/^const uchar SSN_HLR     = 0x06;$/;"	v
SSN_INAP	sccpdefs.h	/^const uchar SSN_INAP    = 0xfe;  \/\/ 254$/;"	v
SSN_INC	sccpdefs.h	/^enum SsnInd { SSN_NONE, SSN_INC };$/;"	e	enum:SsnInd
SSN_ISUP	sccpdefs.h	/^const uchar SSN_ISUP    = 0x03;$/;"	v
SSN_MAP	sccpdefs.h	/^const uchar SSN_MAP     = 0x05;$/;"	v
SSN_MSC	sccpdefs.h	/^const uchar SSN_MSC     = 0x08;$/;"	v
SSN_NONE	sccpdefs.h	/^enum SsnInd { SSN_NONE, SSN_INC };$/;"	e	enum:SsnInd
SSN_OMAP	sccpdefs.h	/^const uchar SSN_OMAP    = 0x04;$/;"	v
SSN_SCF	sccpdefs.h	/^const uchar SSN_SCF     = 0x93;  \/\/ 147$/;"	v
SSN_SCMG	sccpdefs.h	/^const uchar SSN_SCMG    = 0x01;$/;"	v
SSN_SCP	sccpdefs.h	/^const uchar SSN_SCP     = 0xef;  \/\/ 239$/;"	v
SSN_SSP	sccpdefs.h	/^const uchar SSN_SSP     = 0xed;  \/\/ 237$/;"	v
SSN_UNKNOWN	sccpdefs.h	/^const uchar SSN_UNKNOWN = 0;$/;"	v
SSN_VLR	sccpdefs.h	/^const uchar SSN_VLR     = 0x07;$/;"	v
STR	main.cpp	19;"	d	file:
SccpAddr	SccpAddr.cpp	/^SccpAddr::SccpAddr(const SccpAddr &rhs)$/;"	f	class:SccpAddr
SccpAddr	SccpAddr.cpp	/^SccpAddr::SccpAddr(void) : ind_()$/;"	f	class:SccpAddr
SccpAddr	SccpAddr.h	/^class SccpAddr$/;"	c
SccpAddrInd	SccpAddr.h	/^	SccpAddrInd()$/;"	f	struct:SccpAddrInd
SccpAddrInd	SccpAddr.h	/^	SccpAddrInd(uchar ind)$/;"	f	struct:SccpAddrInd
SccpAddrInd	SccpAddr.h	/^struct SccpAddrInd$/;"	s
SccpMessage	sccpdefs.h	/^enum SccpMessage$/;"	g
SccpParamName	sccpdefs.h	/^enum SccpParamName$/;"	g
SgpParam	typedefs.h	/^struct SgpParam$/;"	s
SsnInd	sccpdefs.h	/^enum SsnInd { SSN_NONE, SSN_INC };$/;"	g
TYPEDEFS_H_	typedefs.h	2;"	d
Timestamp	typedefs.h	/^    Timestamp(uint32_t s = 0, uint32_t u = 0)$/;"	f	struct:Timestamp
Timestamp	typedefs.h	/^struct Timestamp$/;"	s
Vstring	typedefs.h	/^typedef vector<string> Vstring;$/;"	t
ZLOG_DAY	typedefs.h	/^enum { ZLOG_DAY = 1, ZLOG_HOUR = 2 };$/;"	e	enum:__anon2
ZLOG_FILE	typedefs.h	/^enum { ZLOG_STDOUT = 1, ZLOG_FILE = 2, ZLOG_SYSLOG = 4 };$/;"	e	enum:__anon1
ZLOG_HOUR	typedefs.h	/^enum { ZLOG_DAY = 1, ZLOG_HOUR = 2 };$/;"	e	enum:__anon2
ZLOG_STDOUT	typedefs.h	/^enum { ZLOG_STDOUT = 1, ZLOG_FILE = 2, ZLOG_SYSLOG = 4 };$/;"	e	enum:__anon1
ZLOG_SYSLOG	typedefs.h	/^enum { ZLOG_STDOUT = 1, ZLOG_FILE = 2, ZLOG_SYSLOG = 4 };$/;"	e	enum:__anon1
_TUSER_H	tcuser.h	2;"	d
addrInd	SccpAddr.cpp	/^SccpAddr &SccpAddr::addrInd(PcInd pc, SsnInd ssn, GtInd gt, RouteInd route)$/;"	f	class:SccpAddr
addrInd	SccpAddr.cpp	/^SccpAddr &SccpAddr::addrInd(const SccpAddrInd &ind)$/;"	f	class:SccpAddr
addrInd	SccpAddr.cpp	/^SccpAddr &SccpAddr::addrInd(uchar ind)$/;"	f	class:SccpAddr
addrInd	SccpAddr.cpp	/^uchar SccpAddr::addrInd(void) const$/;"	f	class:SccpAddr
as_list	typedefs.h	/^    vector<uint16_t> as_list;$/;"	m	struct:AspParam
assocId	typedefs.h	/^    uint32_t assocId;$/;"	m	struct:AspParam
assocId	typedefs.h	/^    uint32_t assocId;$/;"	m	struct:SgpParam
bcd2str	common.cpp	/^string bcd2str(const Bytes &bcd, size_t length)$/;"	f
bcd2str	common.cpp	/^string bcd2str(const uchar *bcd, size_t length, int oe)$/;"	f
bytes2int	common.cpp	/^uint32_t bytes2int(const Bytes &bytes)$/;"	f
cktRange	typedefs.h	/^    vector<CktRange> cktRange;$/;"	m	struct:RouteKey
conf	main.cpp	/^static tcuser_conf conf;$/;"	v	file:
construct	tcuser.cpp	/^construct(const uint8_t * hexstr, int len)$/;"	f	class:params
convert	common.cpp	/^int convert(const char *from, const char *to, char* save, int savelen, const char *src, int srclen)$/;"	f
daddr	tcuser.h	/^    string daddr;$/;"	m	struct:tcuser_conf
dpc	sccpdefs.h	/^    uint32_t dpc;$/;"	m	struct:Label
dpc	typedefs.h	/^    uint32_t         dpc;$/;"	m	struct:RouteKey
dst	tcuser.h	/^    uint8_t dst; \/* destination module ID*\/$/;"	m	struct:hdr
encode	SccpAddr.cpp	/^SccpAddr &SccpAddr::encode(uchar encode)$/;"	f	class:SccpAddr
encode	SccpAddr.cpp	/^uchar SccpAddr::encode(void) const$/;"	f	class:SccpAddr
encode_	SccpAddr.h	/^    uchar encode_;      \/\/ 编码设计$/;"	m	class:SccpAddr
err_info	tcuser.h	/^    uint32_t err_info; \/* status information *\/$/;"	m	struct:hdr
fetchle16	common.cpp	/^uint16_t fetchle16(const char **buf)$/;"	f
fetchle16	common.cpp	/^uint16_t fetchle16(const char *buf)$/;"	f
getAddrInd	SccpAddr.cpp	/^SccpAddrInd SccpAddr::getAddrInd() const$/;"	f	class:SccpAddr
gt	SccpAddr.cpp	/^Bytes SccpAddr::gt() const$/;"	f	class:SccpAddr
gt	SccpAddr.cpp	/^SccpAddr &SccpAddr::gt(const Bytes& in)$/;"	f	class:SccpAddr
gt	SccpAddr.cpp	/^SccpAddr &SccpAddr::gt(const string& in)$/;"	f	class:SccpAddr
gtInd	SccpAddr.h	/^	uchar gtInd:    4;$/;"	m	struct:SccpAddrInd
gtStr	SccpAddr.cpp	/^string SccpAddr::gtStr() const $/;"	f	class:SccpAddr
gt_	SccpAddr.h	/^    Bytes gt_;          \/\/ 全局码$/;"	m	class:SccpAddr
gtt	SccpAddr.cpp	/^SccpAddr &SccpAddr::gtt(uchar gtt)$/;"	f	class:SccpAddr
gtt	SccpAddr.cpp	/^uchar SccpAddr::gtt(void) const$/;"	f	class:SccpAddr
gtt_	SccpAddr.h	/^    uchar gtt_;         \/\/ 全局码翻译$/;"	m	class:SccpAddr
handle_options	main.cpp	/^handle_options(int argc, char *argv[])$/;"	f	file:
hclass	tcuser.h	/^    uint8_t hclass; \/* generic MSG type *\/$/;"	m	struct:hdr
hdr	tcuser.h	/^struct hdr$/;"	s
hex2str	common.cpp	/^string hex2str(const uchar *buf, size_t cnt, bool neat)$/;"	f
id	tcuser.h	/^    uint16_t id; \/* module instantiation *\/$/;"	m	struct:hdr
ind_	SccpAddr.h	/^    SccpAddrInd ind_;   \/\/ 地址指示语$/;"	m	class:SccpAddr
int2bytes	common.cpp	/^Bytes int2bytes(uint32_t num)$/;"	f
lcic	typedefs.h	/^    uint16_t lcic;$/;"	m	struct:CktRange
len	tcuser.h	/^    uint8_t len;$/;"	m	struct:param
m3aspId	typedefs.h	/^    uint32_t m3aspId;$/;"	m	struct:AspParam
main	main.cpp	/^int main(int ac, char * av[])$/;"	f
min_act_asp	typedefs.h	/^    uint8_t  min_act_asp;$/;"	m	struct:RasParam
name	tcuser.h	/^    uint8_t name;$/;"	m	struct:param
natAddrInd	SccpAddr.cpp	/^SccpAddr &SccpAddr::natAddrInd(uchar nai)$/;"	f	class:SccpAddr
natAddrInd	SccpAddr.cpp	/^uchar SccpAddr::natAddrInd(void) const$/;"	f	class:SccpAddr
natAddrInd_	SccpAddr.h	/^    uchar natAddrInd_;  \/\/ 地址性质指示$/;"	m	class:SccpAddr
next	tcuser.h	/^    struct hdr *next; \/* reserved for internal use only *\/$/;"	m	struct:hdr	typeref:struct:hdr::hdr
next_ref	tcuser.h	/^    uint32_t next_ref; \/* reserved for internal use only *\/$/;"	m	struct:hdr
numPlan	SccpAddr.cpp	/^SccpAddr &SccpAddr::numPlan(uchar numPlan)$/;"	f	class:SccpAddr
numPlan	SccpAddr.cpp	/^uchar SccpAddr::numPlan(void) const$/;"	f	class:SccpAddr
numPlan_	SccpAddr.h	/^    uchar numPlan_;     \/\/ 编号计划$/;"	m	class:SccpAddr
number	tcuser.h	/^    string number; $/;"	m	struct:tcuser_conf
nw_app	typedefs.h	/^    uint32_t         nw_app;$/;"	m	struct:RouteKey
nw_app	typedefs.h	/^    uint32_t nw_app;$/;"	m	struct:AspParam
nw_app	typedefs.h	/^    uint32_t nw_app;$/;"	m	struct:SgpParam
opc	sccpdefs.h	/^    uint32_t opc;$/;"	m	struct:Label
opc	typedefs.h	/^    uint32_t opc;$/;"	m	struct:CktRange
opc	typedefs.h	/^    vector<uint32_t> opc;$/;"	m	struct:RouteKey
operator <	common.cpp	/^bool operator <(const timeval &t1, const timeval &t2)$/;"	f
operator <<	tcuser.cpp	/^ostream & operator<<(ostream & os, const tcuser_conf & tc)$/;"	f
operator <<	tcuser.cpp	/^ostream &operator<<(ostream & os, const param & p)$/;"	f
operator <<	tcuser.cpp	/^ostream &operator<<(ostream & os, const params & ps)$/;"	f
operator =	SccpAddr.cpp	/^SccpAddr &SccpAddr::operator=(const SccpAddr &rhs)$/;"	f	class:SccpAddr
operator =	SccpAddr.h	/^	SccpAddrInd& operator=(const SccpAddrInd& rhs)$/;"	f	struct:SccpAddrInd
operator =	SccpAddr.h	/^	SccpAddrInd& operator=(uchar ind)$/;"	f	struct:SccpAddrInd
operator ==	common.cpp	/^bool operator ==(const timeval &t1, const timeval &t2)$/;"	f
operator ==	tcuser.h	/^    bool operator==(const param & a) const {return a.name == name;}$/;"	f	struct:param
pack	SccpAddr.cpp	/^bool SccpAddr::pack(Bytes *buf)$/;"	f	class:SccpAddr
param	tcuser.h	/^    param(uint8_t n = 0x00, uint8_t l= 0x00, const string & v= "")$/;"	f	struct:param
param	tcuser.h	/^struct param$/;"	s
params	tcuser.h	/^    params(void):primitive_type(0x00){}$/;"	f	struct:params
params	tcuser.h	/^struct params$/;"	s
parse_bin	tcuser.cpp	/^parse_bin(const uint8_t * pptr, int mlen)$/;"	f	class:params
pc2int	common.cpp	/^uint32_t pc2int(const char *pc)$/;"	f
pc2int	common.cpp	/^uint32_t pc2int(const string &pc)$/;"	f
pcInd	SccpAddr.h	/^	uchar pcInd:    1;$/;"	m	struct:SccpAddrInd
pc_	SccpAddr.h	/^    uint32_t pc_;       \/\/ 信令点码$/;"	m	class:SccpAddr
pointCode	SccpAddr.cpp	/^SccpAddr &SccpAddr::pointCode(uint32_t pc)$/;"	f	class:SccpAddr
pointCode	SccpAddr.cpp	/^uint32_t SccpAddr::pointCode(void) const$/;"	f	class:SccpAddr
primitive_type	tcuser.h	/^    uint8_t primitive_type;$/;"	m	struct:params
print_bytes	main.cpp	/^print_bytes(const Bytes & bytes)$/;"	f	file:
print_help	main.cpp	/^print_help(const char * program)$/;"	f	file:
push	tcuser.h	/^    void push(const param & p) {vp.push_back(p);};$/;"	f	struct:params
ras	typedefs.h	/^    uint16_t ras;$/;"	m	struct:Ras
ras	typedefs.h	/^    vector<Ras> ras;$/;"	m	struct:AspParam
ras	typedefs.h	/^    vector<Ras> ras;$/;"	m	struct:SgpParam
rasp	typedefs.h	/^    vector<uint16_t> rasp;$/;"	m	struct:Ras
reserved	SccpAddr.h	/^	uchar reserved: 1;$/;"	m	struct:SccpAddrInd
rkey	typedefs.h	/^    RouteKey rkey;$/;"	m	struct:AsParam
rkey	typedefs.h	/^    RouteKey rkey;$/;"	m	struct:RasParam
routeInd	SccpAddr.h	/^	uchar routeInd: 1;$/;"	m	struct:SccpAddrInd
rsp_req	tcuser.h	/^    uint16_t rsp_req; \/* response required *\/$/;"	m	struct:hdr
rtctx	typedefs.h	/^    uint32_t rtctx;$/;"	m	struct:AsParam
rtctx	typedefs.h	/^    uint32_t rtctx;$/;"	m	struct:RasParam
saddr	tcuser.h	/^    string saddr;$/;"	m	struct:tcuser_conf
sec	typedefs.h	/^    uint32_t sec;$/;"	m	struct:Timestamp
si	typedefs.h	/^    vector<uint8_t>  si;$/;"	m	struct:RouteKey
sls	sccpdefs.h	/^    uchar sls;$/;"	m	struct:Label
splitaddr	common.cpp	/^bool splitaddr(const char *addr, char *ip, uint16_t *port)$/;"	f
src	tcuser.h	/^    uint8_t src; \/* sending module ID *\/$/;"	m	struct:hdr
ssn	SccpAddr.cpp	/^SccpAddr &SccpAddr::ssn(uchar ssn)$/;"	f	class:SccpAddr
ssn	SccpAddr.cpp	/^uchar SccpAddr::ssn(void) const$/;"	f	class:SccpAddr
ssnInd	SccpAddr.h	/^	uchar ssnInd:   1;$/;"	m	struct:SccpAddrInd
ssn_	SccpAddr.h	/^    uchar ssn_;         \/\/ 子系统号$/;"	m	class:SccpAddr
status	tcuser.h	/^    uint16_t status; \/* returned status *\/$/;"	m	struct:hdr
str2bcd	common.cpp	/^int str2bcd(const string &str, Bytes *bcd, uchar tail)$/;"	f
str2hex	common.cpp	/^void str2hex(const string &str, ByteArray &hex)$/;"	f
str2hex	common.cpp	/^void str2hex(const uchar *buf, size_t length, ByteArray &hex)$/;"	f
str2int	common.cpp	/^uint64_t str2int(const char *str)$/;"	f
str2int	common.cpp	/^uint64_t str2int(const string &str)$/;"	f
tcuser_conf	tcuser.h	/^struct tcuser_conf$/;"	s
test	main.cpp	/^test(const uint8_t * hexstr, int len)$/;"	f	file:
timediff	common.cpp	/^double timediff(const timeval &begin, const timeval &end)$/;"	f
timediff	common.cpp	/^int timediff(time_t begin, time_t end)$/;"	f
toByte	SccpAddr.h	/^	uchar toByte() const$/;"	f	struct:SccpAddrInd
tokenize	common.cpp	/^void tokenize(const string &str, Vstring &tokens, const string &delimiters)$/;"	f
tokenizeEx	common.cpp	/^void tokenizeEx(const string &str, Vstring &tokens, const string &delimiters)$/;"	f
tokenizeInt	common.h	/^void tokenizeInt(const string &str, vector<T> &tokens, const string &delimiters)$/;"	f
trfmode	typedefs.h	/^    uint32_t         trfmode;$/;"	m	struct:RouteKey
type	tcuser.h	/^    uint16_t type; \/* type of message *\/$/;"	m	struct:hdr
type	tcuser.h	/^    void type(uint8_t t) {primitive_type = t;}$/;"	f	struct:params
uchar	typedefs.h	/^typedef uint8_t uchar;$/;"	t
ucic	typedefs.h	/^    uint16_t ucic;$/;"	m	struct:CktRange
unpack	SccpAddr.cpp	/^bool SccpAddr::unpack(const uchar *buf, size_t length)$/;"	f	class:SccpAddr
update	tcuser.cpp	/^update(const param & p)$/;"	f	class:params
usec	typedefs.h	/^    uint32_t usec;$/;"	m	struct:Timestamp
value	tcuser.h	/^    string  value;$/;"	m	struct:param
vp	tcuser.h	/^    vector<param> vp;$/;"	m	struct:params
~SccpAddr	SccpAddr.cpp	/^SccpAddr::~SccpAddr()$/;"	f	class:SccpAddr
~param	tcuser.h	/^    ~param(){};$/;"	f	struct:param
~params	tcuser.h	/^    ~params(void){}$/;"	f	struct:params
